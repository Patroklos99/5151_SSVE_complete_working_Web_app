image:
  name: docker:dind

before_script:
  - apk update
  - apk upgrade

stages:
  - build
  - test

build-job:
  stage: build
  only:
    - feature/ajoutPipeline
  script:
    - TZ=Canada/Eastern
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone # définir le timezone pour éviter qu'il soit demandé et que ça stall pendant l'install de docker
    - apk add openjdk17 docker-compose grep
    - export JAVA_HOME=$(readlink -f /usr/bin/javac | sed "s:/bin/javac::")
    - ./mvnw clean install # on n'a besoin de rouler ça qu'une seule fois puisque les artéfacts (ici un jar) sont partagés entre les stages par défaut
    - |-
      for containerName in pipelinereact pipelinespring; do
        exit_code=0
        docker container ls -a | grep -q $containerName || exit_code=$?
        if [ $exit_code -ne 1 ]; then docker container rm -f $containerName; echo REMOVED $containerName; fi;
      done
    - docker image prune -f # enlever les anciennes images sinon ça pile up
    - docker build -f frontend/DockerfileReact -t ssve-react . 
    - docker build -f backend/src/DockerfileSpring -t ssve-spring .
    - docker run -itd -p 3000:3000 --name pipelinereact ssve-react
    - docker run -itd -p 8080:8080 --name pipelinespring ssve-spring
    
unit-test-job:
  stage: test
  only:
    - feature/ajoutPipeline
  script:
    - apk add openjdk17
    - export JAVA_HOME=$(readlink -f /usr/bin/javac | sed "s:/bin/javac::") # smort
    - ./mvnw verify
    
postman_tests:
  stage: test
  only:
    - feature/ajoutPipeline
  image:
      name: postman/newman:alpine
      entrypoint: [""]
  script:
    - newman --version
    - newman run postman/SSVE.postman_collection.json -e postman/serveurADVE.postman_environment.json